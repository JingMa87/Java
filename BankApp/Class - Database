import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;

/**
 * Database class that adds customer objects to an ArrayList
 Implements serializable to make reading and writing possible
 */
public class Database implements Serializable{
    // The ArrayList of customer objects
    private ArrayList<Customer> customers = new ArrayList<>();
    
    // Adds a new customer object to the database
    public void addCustomer(Customer customer) {
        // Gets a new account number if the current one already exists
        if (accountExists(customer.getAccount().getAccountNumber())) {
            customer.getAccount().setAccountNumber(findValidAccountNumber());
        }
        customers.add(customer);
    }
    
    // Checks if the account number already exists
    private boolean accountExists(int accountNumber) {
        for (Customer c : customers){
            if (c.getAccount().getAccountNumber() == accountNumber) {
                return true;
            }
        }
        return false;
    }
    
    // Removes customer object from the database
    public void removeCustomer(Customer customer) {
        customers.remove(customer);
    }

    // Finds a valid account number
    private int findValidAccountNumber() {
        int accountNumber = 0;
        do {
            accountNumber = Account.getNextAccountNumber();
        } while(accountExists(accountNumber));      
        return accountNumber;
    }
    
    // Returns the ArrayList of customer objects
    public ArrayList<Customer> getCustomers() {
        return customers;
    }

    // Searches the database for a customer by account number and returns it
    public Customer getCustomerByAccountNumber(int accountNumber) {
        for(Customer customer : customers){
            if(customer.getAccount().getAccountNumber() == accountNumber) return customer;
        }
        return null;
    }

    // Rounds a value down to n decimal places
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.FLOOR);
        return bd.doubleValue();
    }   
}
