import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Bank application that allows the user to add customers to a database.
 * Keeps track of the balance and offers withdraw and deposit options.
 * Extends the JFrame window class.
 */
public class BankApp extends javax.swing.JFrame {

    // Declares and initializes a database to save customers to and
    // a save location for saving and opening files.
    private Database database;
    private String saveLocation = null;
    private DefaultTableModel model;

    public BankApp() {
        initComponents();
        setLocationRelativeTo(null);
        database = new Database();
        model = (DefaultTableModel) table.getModel();
    }

    // Exits the BankApp
    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.dispose();
    }                                        

    // Opens an AddAccountWindow and adds a new customer to the table
    private void addAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        AddAccountWindow window = new AddAccountWindow(this, true, database);
        window.setVisible(true);
        Customer customer = window.getCustomer();
        if (customer != null) addCustomerToTable(customer);
    }                                                

    // Removes a customer from the table and the database
    private void removeAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // Shows a confirmation window and deletes a customer
        int result = JOptionPane.showConfirmDialog(this, "Are you sure?", "Select an Option" , JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            int selectedRow = table.getSelectedRow();
            Customer customer = getSelectedCustomer(selectedRow);
            if (customer != null) {
                database.removeCustomer(customer);
                model.removeRow(selectedRow);
            }
        }
        // If there's no customers in the table, the remove account, deposit and withdraw buttons are disabled
        if (table.getRowCount() == 0) {
            removeAccountButton.setEnabled(false);
            depositButton.setEnabled(false);
            withdrawButton.setEnabled(false);
        }
    }                                                   

    // Opens a DepositWindow and deposits the money to the customers account
    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        depositOrWithdraw("deposit");
    }                                             

    // Opens a WithdrawWindow and withdraws the money from the customers account
    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        depositOrWithdraw("withdraw");
    }                                              

    // If a customer is selected in the table, the remove account, 
    // deposit and withdraw buttons are enabled.
    // If the user double clicks a customer, a CustomerInfoWindow pops-up.
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {                                   
        removeAccountButton.setEnabled(true);
        depositButton.setEnabled(true);
        withdrawButton.setEnabled(true);
        
        if (evt.getClickCount() == 2) {
            Customer customer = getSelectedCustomer(table.getSelectedRow());
            CustomerInfoWindow page = new CustomerInfoWindow(this, true, customer);
            page.setVisible(true);
        }
    }                                  

    // Saves the customer info to the current save location.
    // If there's no save location, the Save As functionality is triggered.
    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (saveLocation != null) {
            saveFile(saveLocation);
        }
        else {
            menuSaveAsActionPerformed(evt);
        }
    }                                        

    // Opens a .ma file with a Database object containing customer data
    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Opens a window to choose a .ma file
        JFileChooser chooser = new JFileChooser();
        int result = fileChooserChoice(chooser, "open");
        if (result == JFileChooser.APPROVE_OPTION) {
            // Gives a warning message if the selected file is not a .ma file
            if (!chooser.getSelectedFile().toString().toLowerCase().endsWith(".ma")) {
                JOptionPane.showMessageDialog(this, "Unsupported file type selected.", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            else {
                // If the file type is correct, the Database object is read
                // and the customer info is loaded into the table
                try {
                    FileInputStream fis = new FileInputStream(chooser.getSelectedFile());
                    ObjectInputStream ois = new ObjectInputStream(fis);
                    Object databaseData = ois.readObject();
                    if (databaseData instanceof Database) {
                        database = (Database) databaseData;
                        reloadTable();
                    }
                    // Changes the save location to the current file
                    // in case the user wants to overwrite it
                    saveLocation = chooser.getSelectedFile().toString();
                    ois.close();
                } catch (IOException|ClassNotFoundException ex) {
                    System.err.println("Caught exception: " + ex.getMessage());
                }
            }
        }
    }                                        

    // The standard Save As functionality
    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Opens a window to choose a .ma file
        JFileChooser chooser = new JFileChooser();
        int result = fileChooserChoice(chooser, "save");
        if (result == JFileChooser.APPROVE_OPTION) {
            // Saves the customer info to a new .ma file
            File file = chooser.getSelectedFile();
            String fileName = file.toString();
            if (!fileName.toLowerCase().endsWith(".ma")) {
                fileName += ".ma";
            }
            boolean saved = saveFile(fileName);
            if (saved) {
                // Changes the save location to the current file
                saveLocation = fileName;
            }
        }
    }                                          

    // Opens either the deposit or withdraw window and transfers money for the user
    private void depositOrWithdraw(String action) {
        int selectedRow = table.getSelectedRow();
        Customer customer = getSelectedCustomer(selectedRow);
        if (customer != null) {
            javax.swing.JDialog window = null;
            if (action.equals("deposit")) window = new DepositWindow(this, true, customer);
            else if (action.equals("withdraw")) window = new WithdrawWindow(this, true, customer);
            if (window != null) window.setVisible(true);
            model.setValueAt(String.format("%.2f", customer.getAccount().getBalance()), selectedRow, 3);
        }
    }
    
    // Sets filechooser filter settings and returns a user choice
    private int fileChooserChoice(JFileChooser chooser, String action) {
        chooser.setFileFilter(new MaFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        int result;
        if (action.equals("open")) result = chooser.showOpenDialog(this);
        else result = chooser.showSaveDialog(this);
        return result;
    }
    
    // Saves the customers' info to a file, including the Database object
    private boolean saveFile(String fileName) {
        try {
            FileOutputStream fOut = new FileOutputStream(fileName);
            ObjectOutputStream objOut = new ObjectOutputStream(fOut);
            objOut.writeObject(database);
            objOut.close();
            return true;
        } 
        catch (IOException ex) {
            return false;
        }
    }
    
    // Searches a customer by account no. and returns it
    private Customer getSelectedCustomer(int selectedRow) {
        Customer customer = null;
        if (selectedRow >= 0) {
            int accountNumber = (int) table.getValueAt(selectedRow, 2);
            customer = database.getCustomerByAccountNumber(accountNumber);
        }
        return customer;
    }
    
    // Adds a new customer to the table
    private void addCustomerToTable(Customer customer) {
        model.addRow(new Object[]{});
        int selectedRow = model.getRowCount() - 1;
        Account account = customer.getAccount();
        model.setValueAt(customer.getFirstName(), selectedRow, 0);
        model.setValueAt(customer.getLastName(), selectedRow, 1);
        model.setValueAt(account.getAccountNumber(), selectedRow, 2);
        model.setValueAt(String.format("%.2f", account.getBalance()), selectedRow, 3);
    }
    
    // Deletes all the old employees from the table and adds the new ones
    private void reloadTable() {
        int rows = model.getRowCount();
        // Deletes the rows from the highest index downwards, since deleting 
        // from index 0 would shift all remaining rows to a lower index
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i); 
        }
        // Adds the customers' info to the table
        for (Customer c : database.getCustomers()) {
            addCustomerToTable(c);
        }
    }
}
