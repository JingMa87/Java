package HRDatabase;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class HRDatabase extends javax.swing.JFrame {
    private Employee employee;
    private Database database;
    private String saveLocation = null;
    /**
     * Creates new form HRDatabase
     */
    public HRDatabase() {
        initComponents();
        setLocationRelativeTo(null);
        database = new Database();
        employee = null;
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        jTextField4.setText(null);
        jComboBox1.setSelectedIndex(-1);
        jComboBox2.setSelectedIndex(-1);
        jComboBox3.setSelectedIndex(-1);
        jComboBox4.setSelectedIndex(-1);
        jComboBox5.setSelectedIndex(-1);
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String firstName, lastName, department, status, startDate, endDate, country, email, phone;
                
        if (jTextField1.getText().equals("") || jTextField2.getText().equals("")
        || jTextField3.getText().equals("") || jTextField4.getText().equals("") ||
        jComboBox1.getSelectedItem() == null || jComboBox2.getSelectedItem() == null 
        || jComboBox3.getSelectedItem() == null || jComboBox4.getSelectedItem() == null 
        || jComboBox5.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Please fill in all the fields.", "Warning", JOptionPane.WARNING_MESSAGE);      
        }
        else if (!jTextField3.getText().matches("^(.+)@(.+)$")) {
            JOptionPane.showMessageDialog(this, "Fill in a correct e-mail address.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else if (!jTextField4.getText().matches("[0-9 -]+")) {
            JOptionPane.showMessageDialog(this, "Fill in a correct phone number.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            model.addRow(new Object[]{jTextField1.getText(), jTextField2.getText(), jComboBox1.getSelectedItem(), 
            jComboBox2.getSelectedItem(), jComboBox3.getSelectedItem(), jComboBox4.getSelectedItem(), 
            jComboBox5.getSelectedItem(), jTextField3.getText(), jTextField4.getText().replace("-", "").replace(" ", "")});
            
            firstName = jTextField1.getText();
            lastName = jTextField2.getText();
            department = jComboBox1.getSelectedItem().toString();
            status = jComboBox2.getSelectedItem().toString();
            startDate = jComboBox3.getSelectedItem().toString();
            endDate = jComboBox4.getSelectedItem().toString();
            country = jComboBox5.getSelectedItem().toString();
            email = jTextField3.getText();
            phone = jTextField4.getText();
            
            employee = new Employee(firstName, lastName, department, status, startDate, endDate, country, email, phone);
            database.addEmployee(employee);            
        }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();        
        if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Select an employee to delete", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            int result = JOptionPane.showConfirmDialog(this, "Are you sure?", "Select an Option" , JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                Employee employee = getSelectedEmployee(jTable1.getSelectedRow());
                if (employee != null) {
                    database.removeEmployee(employee);
                    model.removeRow(jTable1.getSelectedRow());
                }
            }
        }
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Select an employee to update", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            model.setValueAt(jTextField1.getText(), jTable1.getSelectedRow(), 0);
            model.setValueAt(jTextField2.getText(), jTable1.getSelectedRow(), 1);
            model.setValueAt(jComboBox1.getSelectedItem(), jTable1.getSelectedRow(), 2);
            model.setValueAt(jComboBox2.getSelectedItem(), jTable1.getSelectedRow(), 3);
            model.setValueAt(jComboBox3.getSelectedItem(), jTable1.getSelectedRow(), 4);
            model.setValueAt(jComboBox4.getSelectedItem(), jTable1.getSelectedRow(), 5);
            model.setValueAt(jComboBox5.getSelectedItem(), jTable1.getSelectedRow(), 6);
            model.setValueAt(jTextField3.getText(), jTable1.getSelectedRow(), 7);
            model.setValueAt(jTextField4.getText(), jTable1.getSelectedRow(), 8);
            
            getSelectedEmployee(jTable1.getSelectedRow()).setFirstName(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setLastName(model.getValueAt(jTable1.getSelectedRow(), 1).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setDepartment(model.getValueAt(jTable1.getSelectedRow(), 2).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setStatus(model.getValueAt(jTable1.getSelectedRow(), 3).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setStartDate(model.getValueAt(jTable1.getSelectedRow(), 4).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setEndDate(model.getValueAt(jTable1.getSelectedRow(), 5).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setCountry(model.getValueAt(jTable1.getSelectedRow(), 6).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setEmail(model.getValueAt(jTable1.getSelectedRow(), 7).toString());
            getSelectedEmployee(jTable1.getSelectedRow()).setPhone(model.getValueAt(jTable1.getSelectedRow(), 8).toString());
            
            JOptionPane.showMessageDialog(this, "Employee updated", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
    }                                        

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        
        jTextField1.setText(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
        jTextField2.setText(model.getValueAt(jTable1.getSelectedRow(), 1).toString());
        jComboBox1.setSelectedItem(model.getValueAt(jTable1.getSelectedRow(), 2));
        jComboBox2.setSelectedItem(model.getValueAt(jTable1.getSelectedRow(), 3));
        jComboBox3.setSelectedItem(model.getValueAt(jTable1.getSelectedRow(), 4));
        jComboBox4.setSelectedItem(model.getValueAt(jTable1.getSelectedRow(), 5));
        jComboBox5.setSelectedItem(model.getValueAt(jTable1.getSelectedRow(), 6));
        jTextField3.setText(model.getValueAt(jTable1.getSelectedRow(), 7).toString());
        jTextField4.setText(model.getValueAt(jTable1.getSelectedRow(), 8).toString());
        
        if (evt.getClickCount() == 2) {
            Employee employee = getSelectedEmployee(jTable1.getSelectedRow());
            AccountDetailsPage page = new AccountDetailsPage(this, true, employee);
            page.setVisible(true);
        }
    }                                    

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new MaFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            if (!chooser.getSelectedFile().toString().toLowerCase().endsWith(".ma")) {
                JOptionPane.showMessageDialog(this, "Unsupported file type selected.", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            else {
                try {
                    FileInputStream fIn = new FileInputStream(chooser.getSelectedFile());
                    ObjectInputStream objIn = new ObjectInputStream(fIn);
                    Object databaseData = objIn.readObject();
                    if (databaseData instanceof Database) {
                        database = (Database) databaseData;
                        reloadTable();
                    }
                    saveLocation = chooser.getSelectedFile().toString();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(HRDatabase.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(HRDatabase.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(HRDatabase.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }                                          

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (saveLocation != null) {
            saveFile(saveLocation);
        }
        else {
            jMenuItem3ActionPerformed(evt);
        }
    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new MaFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String fileName = file.toString();
            if (!fileName.toLowerCase().endsWith(".ma")) {
                fileName += ".ma";
            }
            boolean saved = saveFile(fileName);
            if (saved) {
                saveLocation = fileName;
            }
        }
    }                                          

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.dispose();
    }                                          

    private boolean saveFile(String fileName) {
        try {
            FileOutputStream fOut = new FileOutputStream(fileName);
            ObjectOutputStream objOut = new ObjectOutputStream(fOut);
            objOut.writeObject(database);
            objOut.close();
            return true;
        } catch (FileNotFoundException ex) {
            return false;
        } catch (IOException ex) {
            return false;
        }
    }
    
    private void reloadTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); 
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i); 
        }
        for (Employee emp : database.getEmployees()) {
            addEmployeeToTable(emp);
        }
    }
    
    private void addEmployeeToTable(Employee employee) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{});
        reloadEmployeeData(model.getRowCount() - 1, employee);
    }
    
    private void reloadEmployeeData(int selectedRow, Employee employee) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setValueAt(employee.getFirstName(), selectedRow, 0);
        model.setValueAt(employee.getLastName(), selectedRow, 1);
        model.setValueAt(employee.getDepartment(), selectedRow, 2);
        model.setValueAt(employee.getStatus(), selectedRow, 3);
        model.setValueAt(employee.getStartDate(), selectedRow, 4);
        model.setValueAt(employee.getEndDate(), selectedRow, 5);
        model.setValueAt(employee.getCountry(), selectedRow, 6);
        model.setValueAt(employee.getEmail(), selectedRow, 7);
        model.setValueAt(employee.getPhone(), selectedRow, 8);
    }
    
    private Employee getSelectedEmployee(int selectedRow) {
        Employee employee = null;
        if (selectedRow >= 0) {
            String name = (String) jTable1.getValueAt(selectedRow, 1);
            employee = database.getEmployeeByName(name);
        }
        return employee;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Create and display the form
        java.awt.EventQueue.invokeLater(() -> {
            new HRDatabase().setVisible(true);
        });
    }
